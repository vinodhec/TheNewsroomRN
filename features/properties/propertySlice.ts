import { createSlice } from '@reduxjs/toolkit';


export interface propertiesState {
  searchResults,
  filteredResults,
  status: string;
  editProperty: any;
}

const initialState: propertiesState = {
  searchResults: [],
  filteredResults: [],
  
  
  
  status: 'idle',
  editProperty: undefined
};


export const propertiesSlice = createSlice({
  name: 'property',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
   
    updateSearchResults: (state, action) => {

      state.searchResults = state[action.payload]
    },
    editProperty: function (state, action) {
      // debugger;
      state.editProperty = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.


});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.luxury.value)`

export const selectProperties = (type: any) => {
  return (state: any) => state.properties[type]
}


export const getEditProperty = () => {
  return (state: any) => {
    //
    return state.properties.editProperty
  }
}


export const {  updateSearchResults, editProperty } = propertiesSlice.actions;


export default propertiesSlice.reducer;
